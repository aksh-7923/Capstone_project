{
	"name": "clean_policy_df",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "policy_dataset",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlDB_Dataset",
						"type": "DatasetReference"
					},
					"name": "policySinkSQLDB"
				},
				{
					"dataset": {
						"referenceName": "policy_parquet",
						"type": "DatasetReference"
					},
					"name": "policySinkAdls"
				}
			],
			"transformations": [
				{
					"name": "window1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          policy_number as string,",
				"          policy_bind_date as string,",
				"          policy_state as string,",
				"          policy_csl as string,",
				"          policy_deductable as string,",
				"          policy_annual_premium as string,",
				"          umbrella_limit as string,",
				"          car_id as string,",
				"          customer_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 window(over(policy_state,",
				"          policy_csl,",
				"          policy_number,",
				"          policy_bind_date,",
				"          policy_deductable,",
				"          policy_annual_premium,",
				"          umbrella_limit,",
				"          car_id,",
				"          customer_id),",
				"     asc(policy_number, true),",
				"     rank = rank()) ~> window1",
				"window1 filter(rank==1) ~> filter1",
				"filter1 select(mapColumn(",
				"          policy_number,",
				"          policy_bind_date,",
				"          policy_state,",
				"          policy_csl,",
				"          policy_deductable,",
				"          policy_annual_premium,",
				"          umbrella_limit,",
				"          car_id,",
				"          customer_id",
				"     ),",
				"     partitionBy('hash', 1),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     partitionBy('hash', 1)) ~> policySinkSQLDB",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> policySinkAdls"
			]
		}
	}
}